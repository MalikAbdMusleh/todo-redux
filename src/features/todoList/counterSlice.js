import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchCount } from "./counterAPI";

const initialState = {
  list: [{ id: 0, title: "No Thing to do ", description: "yet" }],
  status: "idle",
};

export const todoSlice = createSlice({
  name: "todo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      action.payload.id = state.list.length;
      state.list.push(action.payload);
    },
    decrement: (state, action) => {
      state.list = state.list.filter((e) => e.id != action.payload);
    },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    edit: (state, action) => {
      state.list = state.list.map((e) => {
       if (e.id == action.payload.id) {
        return {id:e.id,title: action.payload.title, description:  action.payload.description }
      }
      return e
      });

    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { increment, decrement, edit } = todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.todo.list;

export default todoSlice.reducer;
